import 'dart:convert';
import 'dart:io';

import 'package:args/command_runner.dart';
import 'package:cli/src/constant.dart';
import 'package:mason_logger/mason_logger.dart';
import 'package:path/path.dart';
import 'package:yaml_edit/yaml_edit.dart';

/// {@template sample_command}
///
/// `cli sample`
/// A [Command] to exemplify a sub command
/// {@endtemplate}
class LabelerCommand extends Command<int> {
  /// {@macro sample_command}
  LabelerCommand({
    required Logger logger,
  }) : _logger = logger {
    argParser.addFlag(
      'cyan',
      abbr: 'c',
      help: 'Prints the same joke, but in cyan',
      negatable: false,
    );
  }

  @override
  String get description => 'A sample sub command that just prints one joke';

  @override
  String get name => 'labeler';

  final Logger _logger;

  @override
  Future<int> run() async {
    final result = await Process.run('git', [
      'rev-parse',
      '--show-toplevel',
    ]);
    final rootDir = result.stdout.toString().trim();
    _logger.info('rootDir: $rootDir');

    final labelerFile = File(join(rootDir, '.github', 'labeler.yml'));
    if (!labelerFile.existsSync()) {
      _logger.err('Required files not found.');
      exit(1);
    }

    final melosListResult = await Process.run('melos', ['list', '--json']);

    final labelsContentLines = await labelerFile.readAsLines();
    // 自動生成の区切り行を探す
    final autoGeneratedIndex = labelsContentLines.indexWhere(
      (line) => line.contains(autoGeneratedLabelComment),
    );
    if (autoGeneratedIndex == -1) {
      print('Auto-generated label section not found.');
      exit(1);
    }

    // 自動生成以前のテキストのみ取得する
    final preGeneratedContent = labelsContentLines
        .sublist(
          0,
          autoGeneratedIndex,
        )
        .join('\n');

    final jsonContent = melosListResult.stdout.toString();

    final jsonData = jsonDecode(jsonContent) as List<dynamic>;

    // YamlEditorを使用してYAMLを編集
    final yamlEditor = YamlEditor('labels:');

    final generatedLabels = <Map<String, dynamic>>[];
    for (final item in jsonData) {
      final path = '${item['location']}'.replaceAll('$rootDir/', '');
      final label = '@$path';

      final newLabel = <String, dynamic>{
        'label': label,
        'files': <String>[
          '$path/.+',
        ],
      };

      generatedLabels.add(newLabel);
    }

    // auto-generated部分に新しいラベルを追加
    yamlEditor.update(['labels'], generatedLabels);

    final newYamlString = yamlEditor.toString();
    final modifiedLines = <String>['  $autoGeneratedLabelComment'];
    for (final line in newYamlString.split('\n')) {
      if (line.startsWith('labels:')) {
        continue;
      }
      if (line.startsWith('  -') && modifiedLines.length != 1) {
        modifiedLines.add('');
      }
      modifiedLines.add(line.replaceAll(r'\/', '/'));
    }

    final post = modifiedLines.join('\n');

    // コメント行を保持しつつ新しいYAML内容に置き換える
    final updatedContent = '$preGeneratedContent\n$post\n';

    await labelerFile.writeAsString(updatedContent);
    // _logger.info(updatedContent);
    _logger.info('Labels updated successfully.');
    return ExitCode.success.code;
  }
}
